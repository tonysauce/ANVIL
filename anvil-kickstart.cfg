#version=RHEL9
# ANVIL - Ansible Navigator & Virtual Infrastructure Lab
# Rocky Linux 9 Kickstart File with DISA STIG Profile
# 2025 Security Standards & Best Practices Implementation
#
# TESTING CREDENTIALS (change for production):
# - User: anvil / Password: anvil123 (sudo access)
# - Root: locked (use anvil user with sudo)
# - Disk encryption: anvil123
# - Bootloader: boot123
# - Network: DHCP (ProxMox pattern)

# System authorization information
auth --enableshadow --passalgo=sha512

# Use network installation source
url --url="https://download.rockylinux.org/pub/rocky/9/BaseOS/x86_64/os/"
repo --name="AppStream" --baseurl="https://download.rockylinux.org/pub/rocky/9/AppStream/x86_64/os/"
repo --name="extras" --baseurl="https://download.rockylinux.org/pub/rocky/9/extras/x86_64/os/"

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# Network information
network --bootproto=dhcp --device=link --ipv6=auto --activate
network --hostname=anvil.local

# SELinux configuration (STIG requirement)
selinux --enforcing

# Firewall configuration (STIG hardened)
firewall --enabled --http --ssh --service=cockpit

# Root password (locked for security - use anvil user)
rootpw --lock

# System services (STIG compliant)
services --enabled="chronyd,sshd,cockpit.socket,auditd,firewalld,rsyslog" --disabled="bluetooth,avahi-daemon"

# System timezone
timezone America/New_York --utc

# User creation with admin privileges (ProxMox pattern)
user --groups=wheel --name=anvil --password=anvil123 --gecos="ANVIL Administrator"

# Disk partitioning (STIG compliant with encryption)
ignoredisk --only-use=sda
autopart --type=lvm --encrypted --passphrase=anvil123
# Alternative explicit partitioning for STIG compliance:
# clearpart --none --initlabel
# part /boot/efi --fstype="efi" --ondisk=sda --size=512 --fsoptions="umask=0077,shortname=winnt"
# part /boot --fstype="xfs" --ondisk=sda --size=1024
# part pv.01 --fstype="lvmpv" --ondisk=sda --size=1 --grow --encrypted --passphrase=changeme
# volgroup rhel --pesize=4096 pv.01
# logvol /tmp --fstype="xfs" --size=2048 --name=tmp --vgname=rhel --fsoptions="nodev,nosuid,noexec"
# logvol /var --fstype="xfs" --size=4096 --name=var --vgname=rhel --fsoptions="nodev"
# logvol /var/log --fstype="xfs" --size=2048 --name=var_log --vgname=rhel --fsoptions="nodev,nosuid,noexec"
# logvol /var/log/audit --fstype="xfs" --size=1024 --name=var_log_audit --vgname=rhel --fsoptions="nodev,nosuid,noexec"
# logvol /home --fstype="xfs" --size=2048 --name=home --vgname=rhel --fsoptions="nodev,nosuid"
# logvol / --fstype="xfs" --size=1 --name=root --vgname=rhel --grow

# System bootloader configuration (UEFI + STIG hardened)
bootloader --location=boot --password=boot123 --iscrypted --append="audit=1 audit_backlog_limit=8192 slub_debug=P page_poison=1 vsyscall=none"

# STIG Security Profile Application
%addon org_fedora_oscap
    content-type = scap-security-guide
    datastream-id = scap_org.open-scap_datastream_from_xccdf_ssg-rhel9-xccdf.xml
    xccdf-id = scap_org.open-scap_cref_ssg-rhel9-xccdf.xml
    profile = xccdf_org.ssgproject.content_profile_stig
%end

# Package selection (minimal + ANVIL components)
%packages --excludedocs --instLangs=en_US.utf8
@^minimal-environment
@standard

# Essential system packages
kernel
kernel-tools
microcode_ctl
grub2-efi-x64
grub2-efi-x64-modules
efibootmgr
shim-x64

# Security and compliance tools
openscap-scanner
scap-security-guide
aide
rng-tools
audit
chrony
rsyslog
logrotate

# Network and firewall
firewalld
iptables
NetworkManager

# Development and management tools
git
curl
wget
vim-enhanced
tmux
htop
tree
unzip

# ANVIL Infrastructure Components
ansible-core
ansible-collection-redhat-rhel_mgmt
ansible-collection-ansible-posix
cockpit
cockpit-navigator
cockpit-packagekit
cockpit-storaged
cockpit-system
cockpit-networkmanager
cockpit-selinux
cockpit-kdump
clevis
clevis-luks
tang
jose
nginx
nginx-mod-stream
nginx-mod-http-perl
podman
podman-compose
buildah
skopeo

# Python ecosystem for Ansible
python3
python3-pip
python3-netaddr
python3-jmespath
python3-kubernetes
python3-openshift

# Container and orchestration tools
crun
conmon
containers-common

# Additional security tools
tripwire
lynis
chkrootkit
clamav
clamav-update

# Remove unnecessary packages (STIG compliance)
-iwl*firmware
-libertas*firmware
-zd1211-firmware
-bfa-firmware
-ipw2100-firmware
-ipw2200-firmware
-ivtv-firmware
-iwl*-firmware
-kernel-firmware
-ql*-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-atmel-firmware
%end

# Post-installation script
%post --log=/var/log/anvil-kickstart.log
#!/bin/bash

# Set up logging
exec 1> >(tee -a /var/log/anvil-kickstart.log)
exec 2>&1

echo "ANVIL: Starting post-installation configuration..."
echo "ANVIL: $(date '+%Y-%m-%d %H:%M:%S') - Post-install script started"

# Update system
echo "ANVIL: Updating system packages..."
dnf update -y

# Enable EPEL repository
echo "ANVIL: Enabling EPEL repository..."
dnf install -y epel-release

# Configure chronyd (STIG requirement)
echo "ANVIL: Configuring chronyd for STIG compliance..."
cat > /etc/chrony.conf << 'EOF'
# STIG-compliant chrony configuration
server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst

driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
logdir /var/log/chrony
maxupdateskew 100.0
hwclockfile /etc/adjtime
EOF

# Configure audit system (STIG compliance)
echo "ANVIL: Configuring audit system..."
cat >> /etc/audit/rules.d/anvil-stig.rules << 'EOF'
# ANVIL STIG Audit Rules
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
-a always,exit -F arch=b64 -S clock_settime -k time-change
-a always,exit -F arch=b32 -S clock_settime -k time-change
-w /etc/localtime -p wa -k time-change
-w /etc/passwd -p wa -k identity
-w /etc/group -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
EOF

# Configure SSH hardening (STIG + 2025 best practices)
echo "ANVIL: Hardening SSH configuration..."
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
cat > /etc/ssh/sshd_config << 'EOF'
# ANVIL SSH Configuration - STIG Compliant + 2025 Best Practices
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
RekeyLimit default none
Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256

# Authentication
LoginGraceTime 60
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 10
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Security options
X11Forwarding no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
Compression delayed
ClientAliveInterval 300
ClientAliveCountMax 0
UseDNS no
PidFile /var/run/sshd.pid
MaxStartups 10:30:60
PermitTunnel no
Banner /etc/issue.net

# Logging
SyslogFacility AUTHPRIV
LogLevel VERBOSE
EOF

# Create security banner (STIG requirement)
echo "ANVIL: Creating security banners..."
cat > /etc/issue.net << 'EOF'
***********************************************************************
*                            WARNING                                 *
*                                                                     *
* This system is for authorized use only. All activity may be        *
* monitored and reported to security personnel. Use of this system   *
* constitutes consent to monitoring for these purposes.              *
*                                                                     *
* ANVIL - Infrastructure Management Platform                         *
***********************************************************************
EOF
cp /etc/issue.net /etc/issue

# Configure firewall for ANVIL services
echo "ANVIL: Configuring firewall..."
systemctl enable firewalld
systemctl start firewalld
firewall-cmd --permanent --add-service=ssh
firewall-cmd --permanent --add-service=cockpit
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --permanent --add-port=7500/tcp  # Tang server
firewall-cmd --reload

# Configure CrowdSec (modern replacement for fail2ban)
echo "ANVIL: Installing and configuring CrowdSec..."
curl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.rpm.sh | bash
dnf install -y crowdsec crowdsec-firewall-bouncer-iptables

# Configure CrowdSec
cat > /etc/crowdsec/config.yaml << 'EOF'
# ANVIL CrowdSec Configuration
common:
  daemonize: true
  pid_dir: /var/run/
  log_media: file
  log_level: info
  log_dir: /var/log/
  log_max_size: 500
  log_max_files: 3
  compress_logs: true
  working_dir: .

config_paths:
  config_dir: /etc/crowdsec/
  data_dir: /var/lib/crowdsec/data/
  simulation_path: /etc/crowdsec/simulation.yaml
  hub_dir: /etc/crowdsec/hub/
  index_path: /etc/crowdsec/hub/.index.json

crowdsec_service:
  acquisition_path: /etc/crowdsec/acquis.yaml
  parser_routines: 1

cscli:
  output: human

db_config:
  log_level: info
  type: sqlite
  db_path: /var/lib/crowdsec/data/crowdsec.db
  flush:
    max_items: 5000
    max_age: 7d

api:
  client:
    insecure_skip_verify: false
    credentials_path: /etc/crowdsec/local_api_credentials.yaml
  server:
    log_level: info
    listen_uri: 127.0.0.1:8080
    profiles_path: /etc/crowdsec/profiles.yaml
    online_client:
      credentials_path: /etc/crowdsec/online_api_credentials.yaml

prometheus:
  enabled: true
  level: full
  listen_addr: 127.0.0.1
  listen_port: 6060
EOF

# Configure acquisition for log sources
cat > /etc/crowdsec/acquis.yaml << 'EOF'
# ANVIL CrowdSec Acquisition Configuration
filenames:
  - /var/log/secure
  - /var/log/messages
  - /var/log/audit/audit.log
  - /var/log/cockpit/*.log
  - /var/log/nginx/access.log
  - /var/log/nginx/error.log
labels:
  type: syslog

---
source: journalctl
journalctl_filter:
  - "_SYSTEMD_UNIT=sshd.service"
  - "_SYSTEMD_UNIT=cockpit.service"
  - "_SYSTEMD_UNIT=nginx.service"
labels:
  type: syslog

---
source: docker
container_name:
  - "*"
labels:
  type: docker
EOF

# Install and configure collections/scenarios
cscli hub update
cscli collections install crowdsecurity/linux
cscli collections install crowdsecurity/sshd  
cscli collections install crowdsecurity/nginx
cscli collections install crowdsecurity/base-http-scenarios
cscli scenarios install crowdsecurity/ssh-bf
cscli scenarios install crowdsecurity/ssh-slow-bf
cscli scenarios install crowdsecurity/http-bf
cscli scenarios install crowdsecurity/http-crawl-non_statics
cscli parsers install crowdsecurity/syslog-logs
cscli parsers install crowdsecurity/dateparse-enrich

# Configure firewall bouncer
cat > /etc/crowdsec/bouncers/crowdsec-firewall-bouncer.yaml << 'EOF'
# ANVIL CrowdSec Firewall Bouncer Configuration
mode: iptables
pid_dir: /var/run/
update_frequency: 10s
daemonize: true
log_mode: file
log_dir: /var/log/
log_level: info
log_compression: true
log_max_size: 100
log_max_backups: 3
log_max_age: 30
api_url: http://localhost:8080
api_key: ${API_KEY}
insecure_skip_verify: false
disable_ipv6: false
deny_action: DROP
deny_log: true
supported_decisions_types:
  - ban
iptables:
  ipv4:
    enabled: true
    set-only: false
    table: filter
    chain: INPUT
  ipv6:
    enabled: true
    set-only: false
    table: filter  
    chain: INPUT
EOF

# Generate API key for bouncer
API_KEY=$(cscli bouncers add crowdsec-firewall-bouncer -o raw)
sed -i "s/\${API_KEY}/$API_KEY/" /etc/crowdsec/bouncers/crowdsec-firewall-bouncer.yaml

# Enable CrowdSec services
systemctl enable crowdsec
systemctl enable crowdsec-firewall-bouncer

# Configure Tang server
echo "ANVIL: Configuring Tang server..."
systemctl enable tangd.socket
mkdir -p /var/db/tang
chown tang:tang /var/db/tang
chmod 750 /var/db/tang

# Generate Tang keys
jose jwk gen -i '{"alg":"ES512"}' -o /var/db/tang/tang.jwk
jose jwk gen -i '{"alg":"ECMR"}' -o /var/db/tang/tang-recovery.jwk
chown tang:tang /var/db/tang/*.jwk
chmod 640 /var/db/tang/*.jwk

# Configure Nginx for reverse proxy
echo "ANVIL: Configuring Nginx..."
systemctl enable nginx
cat > /etc/nginx/conf.d/anvil.conf << 'EOF'
# ANVIL Nginx Configuration
server {
    listen 80;
    server_name anvil.local;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name anvil.local;
    
    ssl_certificate /etc/pki/tls/certs/anvil.crt;
    ssl_certificate_key /etc/pki/tls/private/anvil.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Cockpit proxy
    location / {
        proxy_pass https://127.0.0.1:9090;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_buffering off;
    }
    
    # Tang server endpoint
    location /tang {
        proxy_pass http://127.0.0.1:7500;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
EOF

# Generate self-signed SSL certificate (replace with proper cert in production)
echo "ANVIL: Generating SSL certificates..."
openssl req -x509 -nodes -days 365 -newkey rsa:4096 \
    -keyout /etc/pki/tls/private/anvil.key \
    -out /etc/pki/tls/certs/anvil.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/OU=ANVIL/CN=anvil.local"
chmod 600 /etc/pki/tls/private/anvil.key
chmod 644 /etc/pki/tls/certs/anvil.crt

# Configure Ansible
echo "ANVIL: Configuring Ansible..."
mkdir -p /etc/ansible/inventories /etc/ansible/playbooks /etc/ansible/roles
cat > /etc/ansible/ansible.cfg << 'EOF'
[defaults]
inventory = /etc/ansible/inventories/hosts
host_key_checking = False
gathering = smart
fact_caching = jsonfile
fact_caching_connection = /tmp/ansible_facts_cache
fact_caching_timeout = 86400
stdout_callback = community.general.yaml
callbacks_enabled = profile_tasks, timer
collections_paths = /usr/share/ansible/collections:/etc/ansible/collections
roles_path = /etc/ansible/roles:/usr/share/ansible/roles

[inventory]
enable_plugins = host_list, script, auto, yaml, ini, toml

[ssh_connection]
ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s
pipelining = True
EOF

# Create initial Ansible inventory
cat > /etc/ansible/inventories/hosts << 'EOF'
[anvil]
localhost ansible_connection=local

[proxmox]
# Add ProxMox hosts here

[rocky_vms]
# Add Rocky Linux VMs here

[containers]
# Add container hosts here
EOF

# Configure Cockpit
echo "ANVIL: Configuring Cockpit..."
systemctl enable cockpit.socket
mkdir -p /etc/cockpit
cat > /etc/cockpit/cockpit.conf << 'EOF'
[WebService]
AllowUnencrypted = false
MaxStartups = 20
Banner = /etc/issue.net

[Session]
IdleTimeout = 15

[Log]
Fatal = journal
Error = journal
Warning = journal
Info = journal
EOF

# Set up AIDE for file integrity monitoring (STIG requirement)
echo "ANVIL: Configuring AIDE..."
aide --init
mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz

# Configure system hardening
echo "ANVIL: Applying additional system hardening..."

# Disable unnecessary services
systemctl disable bluetooth avahi-daemon cups

# Set kernel parameters for security
cat >> /etc/sysctl.d/99-anvil-security.conf << 'EOF'
# ANVIL Security Hardening
# Network security
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_syncookies = 1

# IPv6 security
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Kernel security
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1
kernel.core_uses_pid = 1
fs.suid_dumpable = 0
EOF

# Create ANVIL management scripts
echo "ANVIL: Creating management scripts..."
mkdir -p /opt/anvil/bin /opt/anvil/playbooks /opt/anvil/logs

cat > /opt/anvil/bin/anvil-status << 'EOF'
#!/bin/bash
# ANVIL Status Check Script
echo "=== ANVIL Infrastructure Status ==="
echo "Date: $(date)"
echo "Hostname: $(hostname)"
echo "Uptime: $(uptime)"
echo ""
echo "=== Services Status ==="
systemctl is-active cockpit.socket nginx tangd.socket sshd firewalld auditd chronyd
echo ""
echo "=== Security Status ==="
echo "SELinux: $(getenforce)"
echo "Firewall: $(firewall-cmd --state)"
echo "CrowdSec: $(systemctl is-active crowdsec)"
echo ""
echo "=== Tang Server Status ==="
curl -s http://localhost:7500/adv | jose fmt -j-.keys -g- -y -o-
echo ""
echo "=== Disk Usage ==="
df -h
echo ""
echo "=== Memory Usage ==="
free -h
EOF

cat > /opt/anvil/bin/anvil-backup << 'EOF'
#!/bin/bash
# ANVIL Backup Script
BACKUP_DIR="/opt/anvil/backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "Creating ANVIL backup in $BACKUP_DIR"
tar -czf "$BACKUP_DIR/etc-backup.tar.gz" /etc/ansible /etc/cockpit /etc/nginx /var/db/tang
echo "Backup completed: $BACKUP_DIR"
EOF

chmod +x /opt/anvil/bin/*

# Create systemd service for ANVIL monitoring
cat > /etc/systemd/system/anvil-monitor.service << 'EOF'
[Unit]
Description=ANVIL Infrastructure Monitoring
After=network.target

[Service]
Type=oneshot
ExecStart=/opt/anvil/bin/anvil-status
User=root
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/anvil-monitor.timer << 'EOF'
[Unit]
Description=Run ANVIL monitoring every hour
Requires=anvil-monitor.service

[Timer]
OnCalendar=hourly
Persistent=true

[Install]
WantedBy=timers.target
EOF

systemctl enable anvil-monitor.timer

# Final system configuration
echo "ANVIL: Finalizing system configuration..."

# Update all security policies
authselect select sssd --force
authselect enable-feature with-faillock
authselect enable-feature with-pamaccess
authselect enable-feature with-pwquality

# Set password policies (STIG compliant)
cat > /etc/security/pwquality.conf << 'EOF'
# ANVIL Password Quality Configuration (STIG Compliant)
minlen = 15
minclass = 4
maxrepeat = 2
maxsequence = 3
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1
difok = 8
EOF

# Configure PAM for account lockout
cat >> /etc/security/faillock.conf << 'EOF'
# ANVIL Faillock Configuration
deny = 3
fail_interval = 900
unlock_time = 900
EOF

# Set file permissions (STIG requirements)
chmod 0644 /etc/passwd
chmod 0000 /etc/shadow
chmod 0000 /etc/gshadow
chmod 0644 /etc/group
chmod 0600 /etc/ssh/sshd_config

# Final service enablement
systemctl enable auditd chronyd firewalld crowdsec crowdsec-firewall-bouncer tangd.socket nginx cockpit.socket

# Create ANVIL completion indicator
touch /etc/anvil-configured
echo "ANVIL: $(date '+%Y-%m-%d %H:%M:%S') - Installation completed successfully" >> /var/log/anvil-kickstart.log

echo "ANVIL: Installation and configuration completed!"
echo "ANVIL: Access the web interface at https://$(hostname):9090"
echo "ANVIL: Tang server available at https://$(hostname)/tang"
echo "ANVIL: Check status with: /opt/anvil/bin/anvil-status"

%end

# Reboot after installation
reboot