#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit Message Validation Hook - Optimized with commitlint
# Ensures commit messages follow conventional commit standards

echo "üîç Commit Message Validation"
echo "============================"

# Use commitlint for fast, standardized commit message validation
npx commitlint --edit "$1"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

validate_commit_message() {
    local commit_msg_file="$1"
    local commit_msg=$(cat "$commit_msg_file")
    
    print_info "Validating commit message format..."
    
    # Skip merge commits and other special commits
    if echo "$commit_msg" | grep -qE "^(Merge|Revert|fixup!|squash!)"; then
        print_info "Special commit detected - skipping validation"
        return 0
    fi
    
    # Check minimum length
    if [ ${#commit_msg} -lt 10 ]; then
        print_error "‚ùå Commit message too short (minimum 10 characters)"
        print_info "Current message: '$commit_msg'"
        return 1
    fi
    
    # Check maximum length for first line
    first_line=$(echo "$commit_msg" | head -n1)
    if [ ${#first_line} -gt 100 ]; then
        print_error "‚ùå First line too long (maximum 100 characters, current: ${#first_line})"
        print_info "Consider moving details to the body"
        return 1
    fi
    
    # Check for imperative mood (starts with verb)
    if echo "$first_line" | grep -qE "^(Fixed|Added|Updated|Changed|Removed|Implemented|Created)"; then
        print_warning "‚ö†Ô∏è  Consider using imperative mood (Fix, Add, Update, etc.)"
        print_info "Current: '$first_line'"
        print_info "Better: '$(echo "$first_line" | sed 's/Fixed/Fix/' | sed 's/Added/Add/' | sed 's/Updated/Update/' | sed 's/Changed/Change/' | sed 's/Removed/Remove/' | sed 's/Implemented/Implement/' | sed 's/Created/Create/')'"
    fi
    
    # Check for proper capitalization
    if ! echo "$first_line" | grep -qE "^[A-Z]"; then
        print_error "‚ùå First line should start with a capital letter"
        return 1
    fi
    
    # Check for ending period
    if echo "$first_line" | grep -qE "\.$"; then
        print_warning "‚ö†Ô∏è  First line should not end with a period"
    fi
    
    # Security-specific checks
    if echo "$commit_msg" | grep -qiE "(password|secret|key|token)" && ! echo "$commit_msg" | grep -qiE "(remove|delete|fix|secure|harden)"; then
        print_warning "‚ö†Ô∏è  Commit mentions sensitive terms - ensure no secrets are included"
    fi
    
    # Infrastructure-specific recommendations
    if echo "$commit_msg" | grep -qiE "(security|hardening|compliance)"; then
        print_info "‚ú® Security-related commit detected - great work!"
    fi
    
    # Check for issue references (optional but recommended)
    if ! echo "$commit_msg" | grep -qE "(#[0-9]+|fixes|closes|resolves)"; then
        print_info "üí° Consider referencing issues with #123 or 'fixes #123'"
    fi
    
    print_success "‚úÖ Commit message validation passed"
    return 0
}

show_commit_guidelines() {
    echo ""
    echo "üìù Commit Message Guidelines:"
    echo "=============================="
    echo ""
    echo "Format:"
    echo "  <type>(<scope>): <subject>"
    echo "  "
    echo "  <body>"
    echo "  "
    echo "  <footer>"
    echo ""
    echo "Examples:"
    echo "  feat(security): add 2025 compliance framework"
    echo "  fix(ansible): resolve container creation timeout"
    echo "  docs(readme): update installation instructions"
    echo "  security(hardening): implement Zero Trust controls"
    echo ""
    echo "Types:"
    echo "  feat     - New features"
    echo "  fix      - Bug fixes"
    echo "  docs     - Documentation"
    echo "  security - Security improvements"
    echo "  refactor - Code refactoring"
    echo "  test     - Tests"
    echo "  chore    - Maintenance"
    echo ""
    echo "Best Practices:"
    echo "  ‚úÖ Use imperative mood (Add, Fix, Update)"
    echo "  ‚úÖ Capitalize first letter"
    echo "  ‚úÖ No period at end of subject"
    echo "  ‚úÖ Subject line ‚â§ 100 characters"
    echo "  ‚úÖ Reference issues when applicable"
    echo ""
}

main() {
    local commit_msg_file="$1"
    
    if [ -z "$commit_msg_file" ]; then
        print_error "No commit message file provided"
        return 1
    fi
    
    echo ""
    echo "üîç Commit Message Validation"
    echo "============================"
    
    if validate_commit_message "$commit_msg_file"; then
        echo ""
        print_success "üéâ Commit message looks good!"
        return 0
    else
        echo ""
        print_error "üí• Commit message validation failed!"
        show_commit_guidelines
        return 1
    fi
}

# Run validation
main "$1"