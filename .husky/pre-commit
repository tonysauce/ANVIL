#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Infrastructure Security Pre-Commit Hooks - Optimized with lint-staged
# Ensures code quality and security before commits

echo "üîç Running optimized pre-commit security and quality checks..."

# Run lint-staged for fast linting of changed files only
echo "‚ö° Running lint-staged on changed files..."
npx lint-staged

echo "üõ°Ô∏è Running security checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check for secrets and sensitive information
check_secrets() {
    print_info "Checking for secrets and sensitive information..."
    
    # Check staged files
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
    
    if [ -z "$STAGED_FILES" ]; then
        print_warning "No staged files to check"
        return 0
    fi
    
    SECRETS_FOUND=0
    
    # Files to exclude from secret scanning
    EXCLUDE_FILES=".husky/|HUSKY-HOOKS.md|README.md|package.*json"
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Skip excluded files
            if echo "$file" | grep -E "$EXCLUDE_FILES" > /dev/null; then
                continue
            fi
            
            # Look for actual secrets (more specific patterns)
            if grep -E "password\s*[=:]\s*[\"'].{8,}[\"']|secret\s*[=:]\s*[\"'].{8,}[\"']|api[_-]?key\s*[=:]\s*[\"'].{20,}[\"']|-----BEGIN.*PRIVATE KEY-----|ssh-rsa AAAA[0-9A-Za-z+/]{300,}|ghp_[0-9a-zA-Z]{36}" "$file" > /dev/null; then
                print_error "Potential secret found in $file"
                SECRETS_FOUND=1
            fi
        fi
    done
    
    if [ $SECRETS_FOUND -eq 1 ]; then
        print_error "‚ùå Secrets detected! Please remove sensitive information before committing."
        return 1
    fi
    
    print_success "‚úÖ No secrets detected"
    return 0
}

# Function to validate shell scripts
check_shell_scripts() {
    print_info "Validating shell scripts with shellcheck..."
    
    SHELL_SCRIPTS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sh|bash)$')
    
    if [ -z "$SHELL_SCRIPTS" ]; then
        print_info "No shell scripts to validate"
        return 0
    fi
    
    # Check if shellcheck is available
    if ! command -v shellcheck > /dev/null 2>&1; then
        print_warning "shellcheck not found - skipping shell script validation"
        print_info "Install shellcheck for better code quality: sudo dnf install ShellCheck"
        return 0
    fi
    
    SCRIPT_ERRORS=0
    
    for script in $SHELL_SCRIPTS; do
        if [ -f "$script" ]; then
            print_info "Checking $script..."
            if ! shellcheck -e SC2034,SC2154 "$script"; then
                print_error "‚ùå Shellcheck failed for $script"
                SCRIPT_ERRORS=1
            fi
        fi
    done
    
    if [ $SCRIPT_ERRORS -eq 1 ]; then
        print_error "‚ùå Shell script validation failed!"
        return 1
    fi
    
    print_success "‚úÖ All shell scripts passed validation"
    return 0
}

# Function to check file permissions
check_file_permissions() {
    print_info "Checking file permissions..."
    
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
    PERM_ERRORS=0
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Check for executable scripts
            case "$file" in
                *.sh|*.py|*.pl)
                    if [ ! -x "$file" ]; then
                        print_warning "Script $file is not executable - fixing..."
                        chmod +x "$file"
                        git add "$file"
                    fi
                    ;;
            esac
            
            # Check for overly permissive files
            PERMS=$(stat -c "%a" "$file" 2>/dev/null || stat -f "%A" "$file" 2>/dev/null || echo "644")
            case "$PERMS" in
                *[6-7][6-7][6-7])
                    print_error "‚ùå File $file is world-writable ($PERMS)"
                    PERM_ERRORS=1
                    ;;
            esac
        fi
    done
    
    if [ $PERM_ERRORS -eq 1 ]; then
        print_error "‚ùå File permission issues detected!"
        return 1
    fi
    
    print_success "‚úÖ File permissions look good"
    return 0
}

# Function to check infrastructure security best practices
check_infrastructure_security() {
    print_info "Checking infrastructure security best practices..."
    
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
    SECURITY_ISSUES=0
    
    # Files to exclude from security scanning (documentation, configs)
    EXCLUDE_FILES=".husky/|HUSKY-HOOKS.md|README.md|package.*json|SECURITY-.*\.md"
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Skip excluded files
            if echo "$file" | grep -E "$EXCLUDE_FILES" > /dev/null; then
                continue
            fi
            
            # Check for hardcoded IPs (except common ranges) in actual code files
            if echo "$file" | grep -E "\.(sh|py|js|ts|yaml|yml|conf)$" > /dev/null; then
                if grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" "$file" | grep -vE "(127\.0\.0\.1|0\.0\.0\.0|192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.|255\.255\.255\.255|example\.com)" > /dev/null; then
                    print_warning "‚ö†Ô∏è  Potential hardcoded IP addresses in $file"
                fi
            fi
            
            # Check for actual weak crypto usage in code
            if echo "$file" | grep -E "\.(sh|py|js|ts)$" > /dev/null; then
                if grep -E "md5sum|sha1sum|openssl.*md5|openssl.*sha1|openssl.*rc4|openssl.*des" "$file" > /dev/null; then
                    print_warning "‚ö†Ô∏è  Weak cryptographic algorithms detected in $file"
                fi
            fi
            
            # Check for insecure protocols in actual URLs
            if grep -E "^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*=[[:space:]]*[\"']http://|wget.*http://|curl.*http://" "$file" > /dev/null; then
                print_warning "‚ö†Ô∏è  Insecure protocols detected in $file"
            fi
            
            # Check for actual default passwords in code
            if grep -E "password[[:space:]]*=[[:space:]]*[\"'](admin|root|123|password)[\"']" "$file" > /dev/null; then
                print_error "‚ùå Default/weak passwords detected in $file"
                SECURITY_ISSUES=1
            fi
        fi
    done
    
    if [ $SECURITY_ISSUES -eq 1 ]; then
        print_error "‚ùå Security issues detected!"
        return 1
    fi
    
    print_success "‚úÖ Infrastructure security checks passed"
    return 0
}

# Main execution
main() {
    echo ""
    echo "üöÄ Infrastructure Security Pre-Commit Checks"
    echo "============================================="
    
    # Run all checks
    EXIT_CODE=0
    
    check_secrets || EXIT_CODE=1
    echo ""
    
    check_shell_scripts || EXIT_CODE=1
    echo ""
    
    check_file_permissions || EXIT_CODE=1
    echo ""
    
    check_infrastructure_security || EXIT_CODE=1
    echo ""
    
    if [ $EXIT_CODE -eq 0 ]; then
        print_success "üéâ All pre-commit checks passed!"
        echo ""
        print_info "Proceeding with commit..."
    else
        print_error "üí• Pre-commit checks failed!"
        echo ""
        print_error "Please fix the issues above before committing."
        print_info "You can bypass these checks with: git commit --no-verify"
        print_warning "However, this is NOT recommended for security reasons."
    fi
    
    echo ""
    
    return $EXIT_CODE
}

# Run main function
main